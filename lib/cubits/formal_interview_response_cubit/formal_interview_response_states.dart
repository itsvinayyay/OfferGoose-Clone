/// Abstract class representing the base state for formal interview responses.
///
/// This class holds the `response` text, which can be shared across different
/// states. Each subclass of `FormalInterviewResponseStates` will inherit this
/// common property.
abstract class FormalInterviewResponseStates {
  /// The response text generated or being generated from the Gemini API.
  final String response;

  /// Constructor to initialize the response state with a given text.
  FormalInterviewResponseStates(this.response);
}

/// Initial state indicating that no response has been generated yet.
///
/// This state is typically used when the app is initialized and waiting
/// for the user to submit a question for generating a response.
class InitialResponseState extends FormalInterviewResponseStates {
  /// Constructor initializing the response to an empty string.
  InitialResponseState() : super("");
}

/// Loading state indicating that a response is being fetched or streamed.
///
/// This state is emitted when the response is still being generated and
/// progressively received from the Gemini API.
class LoadingResponseState extends FormalInterviewResponseStates {
  /// Constructor to initialize the loading state with the current partial response.
  ///
  /// - [response]: The text of the response received so far from the API.
  LoadingResponseState(super.response);
}

/// Loaded state indicating that the full response has been successfully received.
///
/// This state is emitted once the Gemini API has finished streaming the response
/// and the entire response text is available.
class LoadedResponseState extends FormalInterviewResponseStates {
  /// Constructor to initialize the loaded state with the complete response.
  ///
  /// - [response]: The final text of the response generated by the Gemini API.
  LoadedResponseState(super.response);
}

/// Error state indicating that an error occurred during the response generation process.
///
/// This state is emitted if an exception is thrown or an error occurs while fetching
/// the response from the Gemini API. It holds the current response (if any) along
/// with the error message.
class ErrorResponseState extends FormalInterviewResponseStates {
  /// The error message describing what went wrong during the response generation process.
  final String errorMessage;

  /// Constructor to initialize the error state with the current response and error message.
  ///
  /// - [response]: The partial or empty response received before the error occurred.
  /// - [errorMessage]: The description of the error or exception encountered.
  ErrorResponseState(super.response, this.errorMessage);
}

